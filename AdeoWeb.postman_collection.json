{
	"info": {
		"_postman_id": "ddab8560-9395-4ee8-9761-0fdd5b91b949",
		"name": "AdeoWeb",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Vietovių Sąrašas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"const jsonDate = pm.response.json();\r",
							"\r",
							"if (jsonData.status === \"error\") {\r",
							"    console.error(`API returned error: \"${jsonData.message}\"`);\r",
							"    postman.setNextRequest(null);\r",
							"    pm.test(\"Status code should not be 200 for error\", function () {\r",
							"        pm.response.to.not.have.status(200);\r",
							"    });\r",
							"    return;\r",
							"} else {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.test(\"Selected method opens up fast enough\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(700)\r",
							"});\r",
							"\r",
							"pm.test(\"Good parameters are provided\", () => {\r",
							"    pm.expect(jsonDate[0]).to.have.keys(\"code\", \"name\", \"administrativeDivision\", \"countryCode\")\r",
							"})\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.meteo.lt/v1/places",
					"protocol": "https",
					"host": [
						"api",
						"meteo",
						"lt"
					],
					"path": [
						"v1",
						"places"
					]
				}
			},
			"response": []
		},
		{
			"name": "Informacija pie vietovę",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Status code is 200\", function () {\r",
							"    pm.response.to.have.status(200);\r",
							"});\r",
							"\r",
							"pm.test(\"Selected method opens up fast enough\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(250)\r",
							"});\r",
							"\r",
							"const jsonData = pm.response.json();\r",
							"pm.test(\"Test data type of the response\", () => {\r",
							"  pm.expect(jsonData).to.be.an(\"object\");\r",
							"  pm.expect(jsonData.code).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.name).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.administrativeDivision).to.be.an(\"string\");\r",
							"  pm.expect(jsonData.country).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.countryCode).to.be.a(\"string\");\r",
							"  pm.expect(jsonData.latitude).to.be.a(\"undefined\");\r",
							"  pm.expect(jsonData.longtitude).to.be.a(\"undefined\");\r",
							"});\r",
							"\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"protocolProfileBehavior": {
				"disableBodyPruning": true
			},
			"request": {
				"method": "GET",
				"header": [],
				"body": {
					"mode": "urlencoded",
					"urlencoded": []
				},
				"url": {
					"raw": "https://api.meteo.lt/v1/places/vilnius",
					"protocol": "https",
					"host": [
						"api",
						"meteo",
						"lt"
					],
					"path": [
						"v1",
						"places",
						"vilnius"
					]
				}
			},
			"response": []
		},
		{
			"name": "Vietovės Prognozių Sarašas",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"if (jsonData.status === \"error\") {\r",
							"    console.error(`API returned error: \"${jsonData.message}\"`);\r",
							"    postman.setNextRequest(null);\r",
							"    pm.test(\"Status code should not be 200 for error\", function () {\r",
							"        pm.response.to.not.have.status(200);\r",
							"    });\r",
							"    return;\r",
							"} else {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.test(\"Selected method opens up fast enough\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(250)\r",
							"});\r",
							"\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.meteo.lt/v1/places/vilnius/forecasts",
					"protocol": "https",
					"host": [
						"api",
						"meteo",
						"lt"
					],
					"path": [
						"v1",
						"places",
						"vilnius",
						"forecasts"
					]
				}
			},
			"response": []
		},
		{
			"name": "Orų Prognozė Vietovei",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"const jsonData = pm.response.json();\r",
							"\r",
							"if (jsonData.status === \"error\") {\r",
							"    console.error(`API returned error: \"${jsonData.message}\"`);\r",
							"    postman.setNextRequest(null);\r",
							"    pm.test(\"Status code should not be 200 for error\", function () {\r",
							"        pm.response.to.not.have.status(200);\r",
							"    });\r",
							"    return;\r",
							"} else {\r",
							"    pm.test(\"Status code is 200\", function () {\r",
							"        pm.response.to.have.status(200);\r",
							"    });\r",
							"}\r",
							"\r",
							"pm.test(\"Selected method opens up fast enough\", () => {\r",
							"    pm.expect(pm.response.responseTime).to.be.below(250)\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "https://api.meteo.lt/v1/places/vilnius/forecasts/long-term",
					"protocol": "https",
					"host": [
						"api",
						"meteo",
						"lt"
					],
					"path": [
						"v1",
						"places",
						"vilnius",
						"forecasts",
						"long-term"
					]
				}
			},
			"response": []
		},
		{
			"name": "Heading",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Content-Type header is present\", () => {\r",
							"  pm.response.to.have.header(\"Content-Type\");\r",
							"});\r",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "HEAD",
				"header": [],
				"url": {
					"raw": "api.meteo.lt",
					"host": [
						"api",
						"meteo",
						"lt"
					]
				}
			},
			"response": []
		},
		{
			"name": "Descriptions",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Places list description\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"Grąžinamas vietovių, kurioms teikiami orų prognozės duomenys, sąrašas.\");\r",
							"});\r",
							"\r",
							"pm.test(\"Info about the place description\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"Nurodžius vietovės kodą, grąžinama detali informacija apie vietovę.\");\r",
							"});\r",
							"\r",
							"pm.test(\"List of location forecasts description\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"Nurodžius vietovės kodą, grąžinamas vietovei teikiamų orų prognozių sąrašas.\");\r",
							"});\r",
							"\r",
							"pm.test(\"Weather forecasts for locations description\",() => {\r",
							"  pm.expect(pm.response.text()).to.include(\"Nurodžius vietovės kodą ir orų prognozės tipą, grąžinama vietovei skirta orų prognozė.\");\r",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "api.meteo.lt",
					"host": [
						"api",
						"meteo",
						"lt"
					]
				}
			},
			"response": []
		}
	]
}